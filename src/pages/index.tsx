import { type NextPage } from "next";
import Head from "next/head";
import { NoteCard } from "~/components/NoteCard";
import { NoteForm } from "~/components/NoteForm/NoteForm";
import type { Note, ToDo } from "~/lib/types";
import { api } from "~/utils/api";

const Home: NextPage = () => {
  const getNotes = api.note.getAll.useQuery();

  const refetch = async () => await getNotes.refetch();

  const create = api.note.create.useMutation({
    onSuccess: refetch,
  });
  const remove = api.note.remove.useMutation({
    onSuccess: refetch,
  });
  const update = api.note.update.useMutation({
    onSuccess: refetch,
  });

  const notes = getNotes.data;

  console.log({ notes });

  const createNote = (note: Note, todos: ToDo[]) => {
    create.mutate({
      ...note,
      title: note.title ?? undefined,
      todos,
    });
  };

  const removeNote = (id: string) => {
    remove.mutate({ id });
  };

  const updateNote = (note: Note & { id: string }) => {
    update.mutate({ ...note, title: note.title ?? undefined });
  };

  const testUpdate = () => {
    if (!notes) return;

    const id = notes[0]?.id;

    if (!id) return;

    update.mutate({ id, title: "newt", todos: [] });
  };

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button onClick={testUpdate}>CLick me</button>
      <main className="flex h-screen w-screen flex-col items-center">
        <NoteForm onSubmit={createNote} />
        <div className="mt-4 grid max-h-[calc(100vh-64px)] flex-1 grid-cols-3 flex-col justify-items-center gap-4 overflow-y-auto p-2">
          {notes?.map((note) => (
            <NoteCard
              key={note.id}
              note={note}
              onChange={updateNote}
              onRemove={() => removeNote(note.id)}
            />
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
